// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_token.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens(token, updated_at, user_id, expires_at)
VALUES(
  $1, 
  NOW(), $2, $3
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT token, refresh_tokens.created_at, refresh_tokens.updated_at, user_id, expires_at, revoked_at, id, users.created_at, users.updated_at, email, hashed_password, is_chirpy_red FROM refresh_tokens
JOIN users ON users.id = user_id
WHERE token = $1
  AND expires_at > NOW()
`

type GetUserFromRefreshTokenRow struct {
	Token          string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	UserID         uuid.UUID
	ExpiresAt      time.Time
	RevokedAt      sql.NullTime
	ID             uuid.UUID
	CreatedAt_2    time.Time
	UpdatedAt_2    time.Time
	Email          string
	HashedPassword string
	IsChirpyRed    bool
}

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (GetUserFromRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i GetUserFromRefreshTokenRow
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.ID,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked_at = NOW(),
  updated_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}

const revokeUsersPrevRefreshToken = `-- name: RevokeUsersPrevRefreshToken :exec
UPDATE refresh_tokens
SET revoked_at = NOW()
WHERE user_id = $1
`

func (q *Queries) RevokeUsersPrevRefreshToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeUsersPrevRefreshToken, userID)
	return err
}
